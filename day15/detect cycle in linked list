package com.day15;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) {
        this.val = val;
        this.next = null;
    }
}

public class LinkedListCycle {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) {
            return false; // Empty list or single node can't form a cycle
        }

        ListNode slow = head;   // moves one step
        ListNode fast = head;   // moves two steps

        while (fast != null && fast.next != null) {
            slow = slow.next;         // move slow by 1
            fast = fast.next.next;    // move fast by 2

            if (slow == fast) {
                return true;  // cycle detected
            }
        }

        return false; // no cycle
    }

    public static void main(String[] args) {
        // Example usage
        LinkedListCycle list = new LinkedListCycle();

        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);

        // create a cycle for testing
        head.next.next.next.next = head.next;

        System.out.println(list.hasCycle(head)); // Output: true
    }
}
